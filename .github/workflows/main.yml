name: Build, Test and Deploy a .NET Core WebApi to Azure App Service

env:
  ARTIFACT_NAME: WebApi
  DOTNET_CORE_VERSION: 8.0.x
  PUBLISH_DIRECTORY: "./out/publish"

on:
  push:
    branches:
      - main
      - deployment
      - master
  workflow_dispatch:

jobs:
  check:
    runs-on: ubuntu-latest
    steps:
      - name: "Check if AZURE_WEBAPP_NAME secret exists"
        env:
          super_secret: ${{ secrets.AZURE_WEBAPP_NAME }}
        if: ${{ env.super_secret == '' }}
        run: |
          echo "‚ùå Secret AZURE_WEBAPP_NAME is missing."
          echo "‚û°Ô∏è Maak hem aan bij Settings > Actions secrets and variables > Actions."
          exit 1

      - name: "Check if AZURE_WEBAPP_PUBLISH_PASSWORD secret exists"
        env:
          super_secret: ${{ secrets.AZURE_WEBAPP_PUBLISH_PASSWORD }}
        if: ${{ env.super_secret == '' }}
        run: |
          echo "‚ùå Secret AZURE_WEBAPP_PUBLISH_PASSWORD is missing."
          echo "‚û°Ô∏è Maak hem aan bij Settings > Actions secrets and variables > Actions."
          exit 1

      - name: "Check if AZURE_WEBAPP_PUBLISH_USERNAME secret exists"
        env:
          super_secret: ${{ secrets.AZURE_WEBAPP_PUBLISH_USERNAME }}
        if: ${{ env.super_secret == '' }}
        run: |
          echo "‚ùå Secret AZURE_WEBAPP_PUBLISH_USERNAME is missing."
          echo "‚û°Ô∏è Maak hem aan bij Settings > Actions secrets and variables > Actions."
          exit 1

      - name: "Check if WEBAPI_PROJECT_NAME secret exists"
        env:
          super_secret: ${{ secrets.WEBAPI_PROJECT_NAME }}
        if: ${{ env.super_secret == '' }}
        run: |
          echo "‚ùå Secret WEBAPI_PROJECT_NAME is missing."
          echo "‚û°Ô∏è Maak hem aan bij Settings > Actions secrets and variables > Actions."
          exit 1

  build:
    runs-on: ubuntu-latest
    needs: check
    steps:
      - uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_CORE_VERSION }}

      - name: Restore dependencies
        run: dotnet restore

      - name: Build
        run: dotnet build --no-restore

      - name: Test
        run: dotnet test --no-build --verbosity normal

      - name: Publish
        run: dotnet publish ./${{ secrets.WEBAPI_PROJECT_NAME }} --output ${{ env.PUBLISH_DIRECTORY }} --configuration Release

      - name: Publish Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.ARTIFACT_NAME }}
          path: ${{ env.PUBLISH_DIRECTORY }}

  migrations:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_CORE_VERSION }}

      - name: Simulate EF Core Database Update
        run: |
          echo "Running 'dotnet ef database update' for project: ${{ secrets.WEBAPI_PROJECT_NAME }}"
          echo "---------------------------------------------------------"
          echo "Tool 'dotnet-ef' (version 8.0.x) is installed."
          echo "Project path: ./${{ secrets.WEBAPI_PROJECT_NAME }}"
          echo "Looking for migrations..."
          dotnet ef migrations list --project ./${{ secrets.WEBAPI_PROJECT_NAME }}
          echo "---------------------------------------------------------"
          echo "‚úÖ Migration simulation complete. No changes were applied."
          echo "üìù If this were a real deployment, we would run:"
          echo "‚û°Ô∏è  dotnet ef database update --project ./${{ secrets.WEBAPI_PROJECT_NAME }}"

  deploy:
    runs-on: ubuntu-latest
    needs: [check, build]
    steps:
      - name: Download artifact from build job
        uses: actions/download-artifact@v4
        with:
          name: ${{ env.ARTIFACT_NAME }}
          path: ${{ env.PUBLISH_DIRECTORY }}

      - name: Deploy to Azure App Service
        uses: azure/webapps-deploy@v3
        with:
          app-name: ${{ secrets.AZURE_WEBAPP_NAME }}
          publish-profile: |
            <publishData>
              <publishProfile profileName="${{ secrets.AZURE_WEBAPP_NAME }} - Zip Deploy"
                publishMethod="ZipDeploy"
                publishUrl="${{ secrets.AZURE_WEBAPP_NAME }}.scm.azurewebsites.net:443"
                userName="${{ secrets.AZURE_WEBAPP_PUBLISH_USERNAME }}"
                userPWD="${{ secrets.AZURE_WEBAPP_PUBLISH_PASSWORD }}"
                destinationAppUrl="http://${{ secrets.AZURE_WEBAPP_NAME }}.azurewebsites.net"
                SQLServerDBConnectionString=""
                mySQLDBConnectionString=""
                hostingProviderForumLink=""
                controlPanelLink="https://portal.azure.com"
                webSystem="WebSites">
                <databases />
              </publishProfile>
            </publishData>
          package: '${{ env.PUBLISH_DIRECTORY }}'

  automated-api-tests:
    runs-on: ubuntu-latest
    needs: [check, build, deploy]
    steps:
      - uses: actions/checkout@v4

      - name: Install Postman CLI
        run: |
          curl -o- "https://dl-cli.pstmn.io/install/linux64.sh" | sh

      - name: Login to Postman CLI
        run: postman login --with-api-key ${{ secrets.POSTMAN_API_KEY }}

      - name: Run API tests
        run: |
          attempts=0
          max_attempts=3
          success=false
          failed=false

          while [ $attempts -lt $max_attempts ]; do
            echo "Attempt $((attempts+1)) of $max_attempts"

            postman collection run 28008990-3203de5a-449a-41c8-bba0-59c06e61f88a \
              -e 28008990-b2df6f73-d29d-43e4-805b-f902f1bb455f \
              -i 28008990-13704902-2232-40b1-bf9f-b8dc2bbe9539

            if [ "$failed" == "true" ]; then
              echo "Tests failed. Retrying..."
              attempts=$((attempts + 1))
              failed=false
            else
              success=true
              break
            fi
          done

          if [ "$success" == "false" ]; then
            echo "API tests failed after $max_attempts attempts."
            exit 1
          else
            echo "API tests passed successfully after $attempts attempts."
          fi
